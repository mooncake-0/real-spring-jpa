server:
  port: 8081

spring:
  datasource:
    url: jdbc:h2:tcp://localhost/~/actualjpa1
    username: sa
    password: 12
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        #        show_sql: true
        format_sql: true
        # 배치, 한번에, 규모있게 몇 개 정도의 인쿼리를 날릴 것인지 세팅
        # 즉, 다대일 관계에서 LAZY 여도 객체를 불러오면 자동으로 연관된 갯수에 맞춰 select 문을 날린다 (하나씩 가져와야 하기 때문임)
        # 그걸 막고, batch_fetch_size 를 지정하면, 다대일 관계에서 연관관계의 갯수만큼을 한방의 쿼리로 모두 가져올 수 있다. (10 이면 관계 100개일 시 10번 쿼리 나가는 것)
        # 쿼리 가 원래는  select * from (다대일 중 다 객체) where (다.(연관주Id) = 일_id) 이렇게 나가는데 (갯수만큼)
        # 끝에 where 다.(연관주(일)_id) = in (?, ?, ? ... ?) >
        # 이렇게 PK 를 가지고 최적화되는 건 DB 입장에서 최고의 최적화이다.
        # 이거에, 페이징도 해주고, QueryDTO 도 해주고, fetchJoin 도 다해주고..... 이래도 안되겠으면 redis 써야 함.
        # Fetch Join 만 해주고, distinct 를 써줘도 다대일 관계에서는 페이징을 못한다 >> 페이징이 필요할 경우 이런 방식을 사용해야 한다는 것이다.
        # 이건 글로벌하게 적용하는 것이고, @BatchSize 로 원하는 엔티티에 지정할 수도 있다. ( 하지만 이걸 선호하심 )
        # V1 ---> V3, V3.1 로 진화하는 양상을 잘 확인해야 한다
        default_batch_fetch_size: 100 # MAX = 1000 입니다
        # 권장은 100~1000 사이 입니다. 이 전략은 SQL IN 절을 사용하는데, DB에 따라 IN 파라미터 제한이 있을 수도 있으므로 확인해야 한다.
        # 근데, 1000으로 잡으면 DB > 앱으로 이동하는 Data 양을 생각해봐야 한다. 이게 순간적인 부하가 있음 (WAS 와 DB 성능이 좋으면 1000하면 됨 ㅋㅋ)
        # 근데 걱정이되면 100으로 해놓고, 성능을 계속해서 파악해 보면 되는 것.
        # 근데, 10까지 줄이면, DB > 앱 으로 찔딱찔딱 서로 통신을 하는 것. 부하는 줄지만 시간이 오래걸림
        # 이거 뭔소린지 모르겠음 ::: "하지만 앱은 100이든 1000이든 결국 전체 데이터를 로딩해야 하므로, 메모리 사용량은 같음. OutOfMemory 에러가 날 확률은 같음. 결국 DB, 앱이 견딜 수 있는 성능에 따라서 세팅"

logging:
  level:
    org.hibernate.SQL: debug